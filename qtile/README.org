#+Title: Qtile Config
#+PROPERTY: header-args :tangle config.py

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#features-of-qtile][Features of Qtile]]
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#keybindings][Keybindings]]
- [[#groups][Groups]]
- [[#settings-for-some-layouts][Settings For Some Layouts]]
- [[#layouts][Layouts]]
- [[#colors][Colors]]
- [[#default-widget-settings][Default Widget Settings]]
- [[#top-panel][Top panel]]
- [[#screens][Screens]]
- [[#some-important-functions][Some Important Functions]]
- [[#drag-floating-windows][Drag floating windows]]
- [[#floating-windows][Floating windows]]
- [[#startup-applications][Startup applications]]
- [[#a-special-thank-to-][A special thank to ...]]

* About This Config
#+CAPTION: Qtile Scrot
#+ATTR_HTML: :alt Qtile Scrot :title Qtile Scrot :align left
[[https://github.com/atem-karma/KitoDots/blob/master/image/qtile.png]]

This is my config for qtile. A minimal tiling window manager writen in python. First i used xmonad but the haskell language is very hard to got in, so i replaced it with qtile beacouse i think python is cool.

* Features of Qtile
- Minimal bloat ( not fully bloatless like dwm or xmonad but is ok too ) but easly extensible.
- Configured in Python.
- Command shell that allows all aspects of Qtile to be managed and inspected.
- Qtile's remote scriptability makes it one of the most thoroughly unit-tested window managers around.

* Imports
Python modules to make this config work

#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from typing import List  # noqa: F401
#+END_SRC

* Variables
Variables to make life easy if i would change some program of this.

#+BEGIN_SRC python
mod = "mod4"                                     # Sets mod key to SUPER/WINDOWS
myTerm = "alacritty"                             # My terminal of choice
browser = "brave-dev"
minimalbrowser = "qutebrowser"
filemanager = "nautilus"
#+END_SRC

* Keybindings
do you really need an explanation?

#+BEGIN_SRC python
keys = [
         ### The essentials
         Key([mod], "Return",
             lazy.spawn(myTerm),
             desc='Launches My Terminal'
             ),
         Key([mod, "shift"], "Return",
             lazy.spawn("dmenu_run -i -p 'Run: '"),
             desc='Run Launcher'
             ),
         Key([mod], "Tab",
             lazy.next_layout(),
             desc='Toggle through layouts'
             ),
         Key([mod], "q",
             lazy.window.kill(),
             desc='Kill active window'
             ),
         Key([mod, "shift"], "r",
             lazy.restart(),
             desc='Restart Qtile'
             ),
         Key([mod, "shift"], "q",
             lazy.shutdown(),
             desc='Shutdown Qtile'
             ),
         Key([mod], "k",
             lazy.layout.down(),
             desc='Move focus down in current stack pane'
             ),
         Key([mod], "j",
             lazy.layout.up(),
             desc='Move focus up in current stack pane'
             ),
         Key([mod], "Right",
             lazy.layout.down(),
             desc='Move focus down in current stack pane'
             ),
         Key([mod], "Left",
             lazy.layout.up(),
             desc='Move focus up in current stack pane'
             ),
         Key([mod, "shift"], "k",
             lazy.layout.shuffle_down(),
             desc='Move windows down in current stack'
             ),
         Key([mod, "shift"], "j",
             lazy.layout.shuffle_up(),
             desc='Move windows up in current stack'
             ),
         Key([mod, "shift"], "Right",
             lazy.layout.shuffle_down(),
             desc='Move windows down in current stack'
             ),
         Key([mod, "shift"], "Left",
             lazy.layout.shuffle_up(),
             desc='Move windows up in current stack'
             ),
         Key([mod], "h",
             lazy.layout.shrink(),
             lazy.layout.decrease_nmaster(),
             desc='Shrink window (MonadTall), decrease number in master pane (Tile)'
             ),
         Key([mod], "l",
             lazy.layout.grow(),
             lazy.layout.increase_nmaster(),
             desc='Expand window (MonadTall), increase number in master pane (Tile)'
             ),
         Key([mod], "n",
             lazy.layout.normalize(),
             desc='normalize window size ratios'
             ),
         Key([mod], "m",
             lazy.window.toggle_fullscreen(),
             desc='toggle window between minimum and maximum sizes'
             ),
         Key([mod, "shift"], "f",
             lazy.window.toggle_floating(),
             desc='toggle floating'
             ),
         Key([mod, "shift"], "m",
             lazy.layout.maximize(),
             desc='toggle fullscreen'
             ),
         Key([mod, "shift"], "space",
             lazy.layout.rotate(),
             lazy.layout.flip(),
             desc='Switch which side main pane occupies (XmonadTall)'
             ),

         #Gui apps
         Key([mod,"control"], "f",
             lazy.spawn(filemanager),
             desc='launch GUI filemanager'
             ),
         Key([mod,"control"], "b",
             lazy.spawn(browser),
             desc='launch GUI Browser'
             ),
         Key([mod,"control"], "q",
             lazy.spawn(minimalbrowser),
             desc='launch minimal browser'
             ),
         Key([mod,"control"], "c",
             lazy.spawn("ferdi"),
             desc='launch my chat client (ferdi actually)'
             ),
         Key([mod,"control"], "h",
             lazy.spawn("bpytop"),
             desc='launch htop replacement'
             ),

         # Emacs programs launched using the key chord MOD+e followed by 'key'
         KeyChord([mod],"e", [
             Key([], "e",
                 lazy.spawn("emacsclient -c -a 'emacs'"),
                 desc='Launch Emacs'
                 ),
             Key([], "b",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(ibuffer)'"),
                 desc='Launch ibuffer inside Emacs'
                 ),
             Key([], "d",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(dired nil)'"),
                 desc='Launch dired inside Emacs'
                 ),
             Key([], "i",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(erc)'"),
                 desc='Launch erc inside Emacs'
                 ),
             Key([], "m",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(mu4e)'"),
                 desc='Launch mu4e inside Emacs'
                 ),
             Key([], "n",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(elfeed)'"),
                 desc='Launch elfeed inside Emacs'
                 ),
             Key([], "s",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(eshell)'"),
                 desc='Launch the eshell inside Emacs'
                 ),
             Key([], "v",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(+vterm/here nil)'"),
                 desc='Launch vterm inside Emacs'
                 )
         ]),

         # Gui applications using key chord MOD+Control followed by 'key'

         # Dmenu scripts launched using the key chord SUPER+p followed by 'key'
         KeyChord([mod], "p", [
             Key([], "x",
                 lazy.spawn("sh /home/kito/.config/dmenu/powermenu-dmenu.sh"),
                 desc='Power menu with dmenu'
                 ),
             Key([], "c",
                 lazy.spawn("sh /home/kito/.config/dmenu/dmenu-edit-config.sh"),
                 desc='Quick configuration file edit with dmenu'
                 ),
             Key([], "q",
                 lazy.spawn("sh /home/kito/.config/dmenu/dmenu-qute.sh"),
                 desc='vimb integration with dmenu'
                 ),
             Key([], "j",
                 lazy.spawn("sh /home/kito/.config/dmenu/dmenu-emoji.sh"),
                 desc='emoji selctor with dmenu'
                 ),
             Key([], "s",
                 lazy.spawn("sh /home/kito/.config/dmenu/dmenu-scrot.sh"),
                 desc='Take screenshots via dmenu'
                 ),
         ])

]
#+END_SRC

* Groups
Groups are the tags of qtile.

#+BEGIN_SRC python
group_names = [("DEV", {'layout': 'monadtall'}),
               ("WWW", {'layout': 'max'}),
               ("CHAT", {'layout': 'monadtall'}),
               ("DOC", {'layout': 'monadtall'}),
               ("SYS", {'layout': 'monadtall'}),
               ("VBOX", {'layout': 'monadtall'}),
               ("MUS", {'layout': 'monadtall'}),
               ("VID", {'layout': 'monadtall'}),
               ("GFX", {'layout': 'floating'})]

groups = [Group(name, **kwargs) for name, kwargs in group_names]

for i, (name, kwargs) in enumerate(group_names, 1):
    keys.append(Key([mod], str(i), lazy.group[name].toscreen()))        # Switch to another group
    keys.append(Key([mod, "shift"], str(i), lazy.window.togroup(name))) # Send current window to another group
#+END_SRC

* Settings For Some Layouts
Settings that I use in most layouts, so I'm defining them one time here.

#+BEGIN_SRC python
layout_theme = {"border_width": 2,
                "margin": 10,
                "border_focus": "89ddff",
                "border_normal": "89aaff"
                }
#+END_SRC

* Layouts
Layout inizialization and some other commented to use it if i would

#+BEGIN_SRC python
layouts = [
    layout.MonadTall(**layout_theme),
    layout.MonadWide(**layout_theme),
    layout.Matrix(**layout_theme),
    layout.Max(**layout_theme),
    layout.Floating(**layout_theme)
    # layout.Bsp(**layout_theme),
    # layout.Stack(stacks=2, **layout_theme),
    # layout.Columns(**layout_theme),
    # layout.RatioTile(**layout_theme),
    # layout.VerticalTile(**layout_theme),
    # layout.Zoomy(**layout_theme),
    # layout.Tile(shift_windows=True, **layout_theme),
    # layout.Stack(num_stacks=2),
    # layout.TreeTab(
    #      font = "Ubuntu",
    #      fontsize = 10,
    #      sections = ["FIRST", "SECOND"],
    #      section_fontsize = 11,
    #      bg_color = "141414",
    #      active_bg = "90C435",
    #      active_fg = "000000",
    #      inactive_bg = "384323",
    #      inactive_fg = "a0a0a0",
    #      padding_y = 5,
    #      section_top = 10,
    #      panel_width = 320
    #      ),
]
#+END_SRC

* Colors
Colors for panel and customazation

#+BEGIN_SRC python
colors = [["#2e3440", "#2e3440"], # background
          ["#242831", "#242831"], # background alt
          ["#ffffff", "#ffffff"], # white
          ["#ff5555", "#ff5555"], # white alt
          ["#797FD4", "#797FD4"], # violet
          ["#89aaff", "#89aaff"], # blue
          ["#89ddff", "#89ddff"], # ice
          ["#E05F27", "#E05F27"], # orange
          ["#c3e88d", "#c3e88d"], # green
          ["#ffcb6b", "#ffcb6b"], # orange
          ["#f07178", "#f07178"]] # red
#+END_SRC

* Default Widget Settings
Default widget settings

#+BEGIN_SRC python
##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font="Ubuntu Mono",
    fontsize = 12,
    padding = 2,
    background=colors[2]
)
extension_defaults = widget_defaults.copy()
#+END_SRC

* Top panel
Top panel settings

#+BEGIN_SRC python
def init_widgets_list():
    widgets_list = [
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[1]
                       ),
              widget.Image(
                       filename = "~/.config/qtile/icons/python-white.png",
                       scale = "False",
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn("dmenu_run -c -l 15 -i -p 'Run :'")}
                       ),
             widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[1]
                       ),
              widget.GroupBox(
                       font = "Ubuntu Bold",
                       fontsize = 9,
                       margin_y = 3,
                       margin_x = 0,
                       padding_y = 5,
                       padding_x = 3,
                       borderwidth = 3,
                       active = colors[2],
                       inactive = colors[2],
                       rounded = False,
                       highlight_color = colors[0],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[2],
                       background = colors[1]
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 40,
                       foreground = colors[2],
                       background = colors[1]
                       ),
              widget.WindowName(
                       max_chars = 25,
                       empty_group_string = '---',
                       foreground = colors[6],
                       background = colors[1],
                       padding = 0
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[1],
                       background = colors[1]
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.Clock(
                       foreground = colors[6],
                       background = colors[0],
                       format = "   %A, %B %d - %H:%M "
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              # widget.Sep(
              #          linewidth = 1,
              #          padding = 6,
              #          foreground = colors[1],
              #          background = colors[1],
              #          ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
             widget.Net(
                       interface = "enp37s0",
                       format = '  ↓ {down} ↑ {up}',
                       foreground = colors[8],
                       background = colors[0],
                       padding = 5
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = " 🌡",
                       padding = 2,
                       foreground = colors[2],
                       background = colors[0],
                       fontsize = 11
                       ),
              widget.ThermalSensor(
                       foreground = colors[10],
                       background = colors[0],
                       threshold = 90,
                       padding = 5
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = " ⟳",
                       padding = 2,
                       foreground = colors[9],
                       background = colors[0],
                       fontsize = 14
                       ),
              widget.CheckUpdates(
                       update_interval = 1800,
                       distro = "Arch_checkupdates",
                       display_format = "{updates} Updates",
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e sudo pacman -Syu')},
                       foreground = colors[9],
                       background = colors[0]
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = "   ",
                       foreground = colors[4],
                       background = colors[0],
                       padding = 0,
                       fontsize = 14
                       ),
              widget.Memory(
                       foreground = colors[4],
                       background = colors[0],
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e bpytop')},
                       padding = 5
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = " :",
                       foreground = colors[9],
                       background = colors[0],
                       padding = 0
                       ),
              widget.Volume(
                       foreground = colors[9],
                       background = colors[0],
                       padding = 5
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              widget.CurrentLayoutIcon(
                       custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                       foreground = colors[0],
                       background = colors[0],
                       padding = 0,
                       scale = 0.7
                       ),
              widget.CurrentLayout(
                       foreground = colors[2],
                       background = colors[0],
                       padding = 5
                       ),
              widget.TextBox(
                       text = ' ',
                       background = colors[1],
                       foreground = colors[0],
                       padding = 0,
                       fontsize = 20
                       ),
              ]
    return widgets_list
#+END_SRC

* Screens
Screen settings for my triple monitor setup.

#+BEGIN_SRC python
def init_widgets_screen1():
    widgets_screen1 = init_widgets_list()
    del widgets_screen1[7:8]               # Slicing removes unwanted widgets (systray) on Monitors 1,3
    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                 # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()
#+END_SRC

* Some Important Functions

#+begin_src python
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)
#+end_src

* Drag floating windows
Defining some mousebindings for use with floating windows.

#+BEGIN_SRC python
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
#+END_SRC

* Floating windows
Define some windows to be always floating ( like confermation blocks, window with password ask, etc etc )

#+BEGIN_SRC python
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    ,*layout.Floating.default_float_rules,
    Match(title='Confirmation'),  # tastyworks exit box
    Match(wm_class='pinentry-gtk-2'),  # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
#+END_SRC

* Startup applications
Startup applications defined in a bash file

#+BEGIN_SRC python
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

wmname = "LG3D"
#+END_SRC

* A special thank to ...
The base of this config is from DT's config. DistroTube is a cool guy who promote linux, foss and bloatless on his youtube channel ( with the support of lbry.net and distrotube.com ). Obviusly i customized this config on my own but some function are the same beacouse is simply a genious! I try to follow him despite i am italian and not english. i suggest to follow him if you wanna improve you learning on linux or something related
I need to specify that my english is not perfect so if someone would correct me to be more readble you are open to do it :).
